// configure your project by adding some pre-configured tasks
// Java plugin is convention based.
// This means that the plugin defines default values for many aspects of the project,
// such as where the Java source files are located.
apply plugin: 'java'
// create Eclipse-specific descriptor files, like .project
apply plugin: 'eclipse'

// Gradle expects to find your production source code under src/main/java
// and your test source code under src/test/java.

// Customization of MANIFEST.MF
sourceCompatibility = 1.5   // specify the version number for our Java project,
version = '1.0'             // along with the Java version our source is written in.
// add some attributes to the JAR manifest
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

// dependencies on external JAR files
// In Gradle, artifacts such as JAR files, are located in a repository.
// A repository can be used for fetching the dependencies of a project,
// or for publishing the artifacts of a project, or both.
// e.g. we will use the public Maven repository:
repositories {
    mavenCentral()
}

// compile-time dependency on commons collections,
// and that our test classes have a compile-time dependency on junit
dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

// Customize tasks e.g.
//  set the properties of a task,
//  add behaviour to a task,
//  change the dependencies of a task,
//  or replace a task entirely
// Results shown in ./build/tests/index.html
test {
    systemProperties 'property': 'value'    // add a system property when the tests are executed
}

// we will publish JAR to a local directory
uploadArchives {
    repositories {
       flatDir {    // local directory
           dirs 'repos'     // with name repos
       }
    }
}
